name: Scramble Credentials

on:
  # This allows the workflow to be triggered manually from the GitHub Actions tab.
  # It also defines a single input for the sandbox name.
  workflow_dispatch:
    inputs:
      sandboxName:
        description: 'Name of the Salesforce sandbox to populate data'
        required: true
        type: string

jobs:
  deploy-to-sandbox:
    runs-on: ubuntu-latest

    steps:
      - name: Install Salesforce CLI
        run: |
          npm install @salesforce/cli --global 

      - name: Authenticate with Salesforce
        env:
          SF_AUTH_URL: ${{ secrets.SF_AUTH_URL }}
        run: |
          echo "Authenticating to Salesforce dev hub using auth URL..."
          sf org login sfdx-url --sfdx-url-file <(echo "$SF_AUTH_URL") --set-default-dev-hub --set-default 

      - name: Authenticate with Salesforce Sandbox
        env:
          SANDBOX_NAME: ${{ github.event.inputs.sandboxName }}
        run: |
          echo "Authenticating to Salesforce dev hub using auth URL..."
          sf org resume sandbox --name=$SANDBOX_NAME 

      # Step 3: Deploy all named credential files to the specified sandbox.
      - name: Process and Deploy All Named Credentials
        env:
          SANDBOX_NAME: ${{ github.event.inputs.sandboxName }}
          SF_USER:  ${{ secrets.SF_USER }}
        run: |
          # Find all named credential files in the repository.
          # The 'find' command searches for files ending with '.namedCredential-meta.xml'.
          for file in $(find . -type f -name "*.namedCredential-meta.xml"); do
            echo "Processing file: $file"
            
            # Use an if statement to check if both conditions are met.
            # We check for the presence of '<protocol>Password</protocol>' and a '<password>' element.
            if grep -q '<protocol>Password</protocol>' "$file" && grep -q '<password>.*</password>' "$file"; then
                # The 'sed' command finds and replaces the password.
                sed -i 's|<password>.*</password>|<password>DONOTUSE</password>|' "$file"
                echo "  Password successfully updated in $file."

                # Deploy the modified file to the sandbox.
                echo "  $file deployed successfully."
            else
                echo "  Conditions not met (protocol is not 'Password' or password element does not exist). No changes made to $file."
            fi
            cat $file
          done
