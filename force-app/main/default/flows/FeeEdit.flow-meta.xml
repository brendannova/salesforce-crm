<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>58.0</apiVersion>
    <choices>
        <name>A_product_not_yet_opened</name>
        <choiceText>A product not yet opened</choiceText>
        <dataType>String</dataType>
        <value>
            <stringValue>A product not yet opened</stringValue>
        </value>
    </choices>
    <choices>
        <name>An_existing_product</name>
        <choiceText>An existing product</choiceText>
        <dataType>String</dataType>
        <value>
            <stringValue>An_existing_product</stringValue>
        </value>
    </choices>
    <choices>
        <name>This_product</name>
        <choiceText>This product</choiceText>
        <dataType>String</dataType>
        <value>
            <stringValue>This product</stringValue>
        </value>
    </choices>
    <description>Allow editing of draft fees</description>
    <environments>Default</environments>
    <formulas>
        <name>finalFee</name>
        <dataType>Number</dataType>
        <expression>IF( {!Get_fee.FeeModel__r.DefaultOverrideable__c}, 
    IF( ISPICKVAL({!Get_fee.FeeModel__r.Format__c}, &quot;Percentage&quot;), {!AmountOverrideablePercentage} - BLANKVALUE({!Discount},0), {!Amount_fixed}-BLANKVALUE({!Discount},0)), {!Get_fee.FeeModel__r.DefaultAmount__c} - BLANKVALUE({!Discount},0))</expression>
        <scale>2</scale>
    </formulas>
    <formulas>
        <name>fixedFeeFormula</name>
        <dataType>Number</dataType>
        <expression>IF( ISPICKVAL({!Get_fee.FeeModel__r.Format__c}, &quot;Percentage&quot;), 0, IF({!Get_fee.FeeModel__r.DefaultOverrideable__c},{!Amount_fixed}-IF({!Get_fee.FeeModel__r.Discountable__c},{!Discount},0), {!Get_fee.FeeModel__r.DefaultAmount__c}-IF({!Get_fee.FeeModel__r.Discountable__c},{!Discount},0)))</expression>
        <scale>2</scale>
    </formulas>
    <formulas>
        <name>percentageFeeFormula</name>
        <dataType>Number</dataType>
        <expression>IF( ISPICKVAL({!Get_fee.FeeModel__r.Format__c}, &quot;Percentage&quot;), 
    IF({!Get_fee.FeeModel__r.DefaultOverrideable__c},
        {!AmountOverrideablePercentage}-IF({!Get_fee.FeeModel__r.Discountable__c},{!Discount},0), 
        {!Get_fee.FeeModel__r.DefaultAmount__c}-IF({!Get_fee.FeeModel__r.Discountable__c},{!Discount},0)),
     0)</expression>
        <scale>2</scale>
    </formulas>
    <formulas>
        <name>percentageFormula</name>
        <dataType>String</dataType>
        <expression>IF(ISPICKVAL({!Get_fee.FeeModel__r.Format__c}, &quot;Percentage&quot;), &quot;%&quot;, &quot;&quot;)</expression>
    </formulas>
    <formulas>
        <name>poundFormula</name>
        <dataType>String</dataType>
        <expression>IF(ISPICKVAL({!Get_fee.FeeModel__r.Format__c}, &quot;Percentage&quot;), &quot;&quot;, &quot;Â£&quot;)</expression>
    </formulas>
    <formulas>
        <name>smDefault</name>
        <dataType>Boolean</dataType>
        <expression>IF({!Get_fee.FeeModel__r.Name}=&quot;Ongoing advice fee&quot;, True, False)</expression>
    </formulas>
    <formulas>
        <name>standardModel</name>
        <dataType>Boolean</dataType>
        <expression>IF( {!Get_fee.FeeModel__r.Product__r.ProductType__r.IsProtection__c} || ISBLANK({!Get_fee.FeeModel__r.Product__c}), false, {!Standard_model})</expression>
    </formulas>
    <formulas>
        <name>takenfromProductFormula</name>
        <dataType>String</dataType>
        <expression>IF({!Taken_from}=&quot;This product&quot;, {!Get_fee.TakenFromLegacy__c},IF({!Taken_from}= &quot;An existing product&quot;, {!productToTakeFrom.firstSelectedRow.Id}, &quot;&quot;))</expression>
    </formulas>
    <formulas>
        <name>takenFromRecommendationFormula</name>
        <dataType>String</dataType>
        <expression>IF( {!Taken_from}=&quot;This product&quot; || {!Get_fee.FeeModel__r.Product__r.ProductType__r.IsProtection__c}, {!Get_fee.TakenFromRecommendation__c}, {!recToTakefrom.firstSelectedRow.Id})</expression>
    </formulas>
    <interviewLabel>Fee | edit {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Fee | edit</label>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>Flow</processType>
    <recordLookups>
        <name>Get_existing_open_product_recommendations</name>
        <label>Get existing open product recommendations</label>
        <locationX>176</locationX>
        <locationY>350</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Get_existing_products</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Household__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>Get_fee.Advice__r.Advice_Household__c</elementReference>
            </value>
        </filters>
        <filters>
            <field>RecommendationType__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>Get_open_product_recommendation_type_id.Id</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>false</getFirstRecordOnly>
        <object>Recommendation__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_existing_products</name>
        <label>Get existing products</label>
        <locationX>176</locationX>
        <locationY>458</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Fee_details</targetReference>
        </connector>
        <filterLogic>or</filterLogic>
        <filters>
            <field>FinServ__Household__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>Get_fee.Advice__r.Advice_Household__c</elementReference>
            </value>
        </filters>
        <filters>
            <field>Household__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>Get_fee.Advice__r.Advice_Household__c</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>false</getFirstRecordOnly>
        <object>FinServ__FinancialAccount__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_fee</name>
        <label>Get fee</label>
        <locationX>176</locationX>
        <locationY>134</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Get_open_product_recommendation_type_id</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>recordId</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Fee__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_open_product_recommendation_type_id</name>
        <label>Get open product recommendation type id</label>
        <locationX>176</locationX>
        <locationY>242</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Get_existing_open_product_recommendations</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Name</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Open product</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>RecommendationType__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordUpdates>
        <name>Update_fee</name>
        <label>Update fee</label>
        <locationX>176</locationX>
        <locationY>674</locationY>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>recordId</elementReference>
            </value>
        </filters>
        <inputAssignments>
            <field>Discount__c</field>
            <value>
                <elementReference>Discount</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>FeeNotes__c</field>
            <value>
                <elementReference>Justification</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>FixedFee__c</field>
            <value>
                <elementReference>Amount_fixed</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>PercentageFee__c</field>
            <value>
                <elementReference>AmountOverrideablePercentage</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>StandardModel__c</field>
            <value>
                <elementReference>standardModel</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>TakenFromLegacy__c</field>
            <value>
                <elementReference>takenfromProductFormula</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>TakenFromRecommendation__c</field>
            <value>
                <elementReference>takenFromRecommendationFormula</elementReference>
            </value>
        </inputAssignments>
        <object>Fee__c</object>
    </recordUpdates>
    <screens>
        <name>Fee_details</name>
        <label>Fee details</label>
        <locationX>176</locationX>
        <locationY>566</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <connector>
            <targetReference>Update_fee</targetReference>
        </connector>
        <fields>
            <name>AmountOverrideablePercentage</name>
            <dataType>Number</dataType>
            <defaultValue>
                <elementReference>Get_fee.PercentageFee__c</elementReference>
            </defaultValue>
            <fieldText>Amount (percentage)</fieldText>
            <fieldType>InputField</fieldType>
            <helpText>&lt;p&gt;Please input either the fixed amount (eg 2000 for a Â£2000 initial fee) or the percentage (eg 1 for a 1% transfer fee, or 0.5 for a 0.5% ongoing fee)&lt;/p&gt;</helpText>
            <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
            <scale>2</scale>
            <validationRule>
                <errorMessage>&lt;p&gt;This fee must be between {!Get_fee.FeeModel__r.Minimum__c}% and {!Get_fee.FeeModel__r.Maximum__c}%.&lt;/p&gt;</errorMessage>
                <formulaExpression>{!Get_fee.FeeModel__r.Minimum__c} &lt;= {!AmountOverrideablePercentage}
&amp;&amp;
{!AmountOverrideablePercentage} &lt;= {!Get_fee.FeeModel__r.Maximum__c}</formulaExpression>
            </validationRule>
            <visibilityRule>
                <conditionLogic>and</conditionLogic>
                <conditions>
                    <leftValueReference>Get_fee.FeeModel__r.DefaultOverrideable__c</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <booleanValue>true</booleanValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>Get_fee.FeeModel__r.Format__c</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <stringValue>Percentage</stringValue>
                    </rightValue>
                </conditions>
            </visibilityRule>
        </fields>
        <fields>
            <name>Amount_fixed</name>
            <dataType>Number</dataType>
            <defaultValue>
                <elementReference>Get_fee.FixedFee__c</elementReference>
            </defaultValue>
            <fieldText>Amount (fixed)</fieldText>
            <fieldType>InputField</fieldType>
            <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
            <scale>2</scale>
            <validationRule>
                <errorMessage>&lt;p&gt;This fee must be between Â£{!&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);&quot;&gt;Get_fee.FeeModel__r.&lt;/span&gt;Minimum__c} and Â£{!&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);&quot;&gt;Get_fee.FeeModel__r.&lt;/span&gt;Maximum__c}.&lt;/p&gt;</errorMessage>
                <formulaExpression>{!Get_fee.FeeModel__r.Minimum__c} &lt;= {!Amount_fixed}
&amp;&amp;
{!Amount_fixed} &lt;= {!Get_fee.FeeModel__r.Maximum__c}</formulaExpression>
            </validationRule>
            <visibilityRule>
                <conditionLogic>and</conditionLogic>
                <conditions>
                    <leftValueReference>Get_fee.FeeModel__r.DefaultOverrideable__c</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <booleanValue>true</booleanValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>Get_fee.FeeModel__r.Format__c</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <stringValue>Fixed amount</stringValue>
                    </rightValue>
                </conditions>
            </visibilityRule>
        </fields>
        <fields>
            <name>amountNonChangeable</name>
            <fieldText>&lt;p&gt;&lt;strong&gt;Amount:&lt;/strong&gt; {!poundFormula}{!Get_fee.FeeModel__r.DefaultAmount__c}{!percentageFormula}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
            <visibilityRule>
                <conditionLogic>and</conditionLogic>
                <conditions>
                    <leftValueReference>Get_fee.FeeModel__r.DefaultOverrideable__c</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <booleanValue>false</booleanValue>
                    </rightValue>
                </conditions>
            </visibilityRule>
        </fields>
        <fields>
            <name>Fee_details_Section1</name>
            <fieldType>RegionContainer</fieldType>
            <fields>
                <name>Fee_details_Section1_Column1</name>
                <fieldType>Region</fieldType>
                <fields>
                    <name>Discount</name>
                    <dataType>Number</dataType>
                    <fieldText>Discount</fieldText>
                    <fieldType>InputField</fieldType>
                    <helpText>&lt;p&gt;Please input the value of the discount, not the value of the fee after the discount.&lt;/p&gt;</helpText>
                    <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
                    <isRequired>true</isRequired>
                    <scale>2</scale>
                    <validationRule>
                        <errorMessage>&lt;p&gt;The discount cannot be greater than the fee&lt;/p&gt;</errorMessage>
                        <formulaExpression>IF( {!Get_fee.FeeModel__r.DefaultOverrideable__c}, IF( ISPICKVAL({!Get_fee.FeeModel__r.Format__c}, &quot;Percentage&quot;), {!Discount} &lt;= {!AmountOverrideablePercentage}, {!Discount} &lt;= {!Amount_fixed}),
{!Discount} &lt;= {!Get_fee.FeeModel__r.DefaultAmount__c})</formulaExpression>
                    </validationRule>
                    <visibilityRule>
                        <conditionLogic>or</conditionLogic>
                        <conditions>
                            <leftValueReference>Get_fee.FeeModel__r.Discountable__c</leftValueReference>
                            <operator>EqualTo</operator>
                            <rightValue>
                                <booleanValue>true</booleanValue>
                            </rightValue>
                        </conditions>
                        <conditions>
                            <leftValueReference>Get_fee.FeeModel__r.DefaultOverrideable__c</leftValueReference>
                            <operator>EqualTo</operator>
                            <rightValue>
                                <booleanValue>true</booleanValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>6</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <fields>
                <name>Fee_details_Section1_Column2</name>
                <fieldType>Region</fieldType>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>6</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <isRequired>false</isRequired>
            <regionContainerType>SectionWithoutHeader</regionContainerType>
            <visibilityRule>
                <conditionLogic>and</conditionLogic>
                <conditions>
                    <leftValueReference>Get_fee.FeeModel__r.Discountable__c</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <booleanValue>true</booleanValue>
                    </rightValue>
                </conditions>
            </visibilityRule>
        </fields>
        <fields>
            <name>Justification</name>
            <dataType>String</dataType>
            <defaultValue>
                <elementReference>Get_fee.FeeNotes__c</elementReference>
            </defaultValue>
            <fieldText>Fee notes</fieldText>
            <fieldType>InputField</fieldType>
            <helpText>&lt;p&gt;Please provide any further details here that you think may be relevant. You do not need to justify where the fee is taken from, but should explain any discount&lt;/p&gt;</helpText>
            <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>false</isRequired>
        </fields>
        <fields>
            <name>Standard_model</name>
            <dataType>Boolean</dataType>
            <defaultValue>
                <elementReference>smDefault</elementReference>
            </defaultValue>
            <fieldText>Standard model?</fieldText>
            <fieldType>InputField</fieldType>
            <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
            <visibilityRule>
                <conditionLogic>or</conditionLogic>
                <conditions>
                    <leftValueReference>Get_fee.FeeModel__r.Product__r.ProductType__r.IsProtection__c</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <booleanValue>false</booleanValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>Get_fee.FeeModel__r.Product__c</leftValueReference>
                    <operator>EqualTo</operator>
                </conditions>
            </visibilityRule>
        </fields>
        <fields>
            <name>Taken_from</name>
            <choiceReferences>This_product</choiceReferences>
            <choiceReferences>An_existing_product</choiceReferences>
            <choiceReferences>A_product_not_yet_opened</choiceReferences>
            <dataType>String</dataType>
            <fieldText>Taken from</fieldText>
            <fieldType>DropdownBox</fieldType>
            <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
            <visibilityRule>
                <conditionLogic>or</conditionLogic>
                <conditions>
                    <leftValueReference>Get_fee.FeeModel__r.Product__r.ProductType__r.IsProtection__c</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <booleanValue>false</booleanValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>Get_fee.FeeModel__r.Product__c</leftValueReference>
                    <operator>EqualTo</operator>
                </conditions>
            </visibilityRule>
        </fields>
        <fields>
            <name>recToTakefrom</name>
            <dataTypeMappings>
                <typeName>T</typeName>
                <typeValue>Recommendation__c</typeValue>
            </dataTypeMappings>
            <extensionName>flowruntime:datatable</extensionName>
            <fieldType>ComponentInstance</fieldType>
            <inputParameters>
                <name>label</name>
                <value>
                    <stringValue>Taken from</stringValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>selectionMode</name>
                <value>
                    <stringValue>SINGLE_SELECT</stringValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>minRowSelection</name>
                <value>
                    <numberValue>1.0</numberValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>tableData</name>
                <value>
                    <elementReference>Get_existing_open_product_recommendations</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>maxRowSelection</name>
                <value>
                    <numberValue>1.0</numberValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>columns</name>
                <value>
                    <stringValue>[{&quot;apiName&quot;:&quot;DestinationName__c&quot;,&quot;guid&quot;:&quot;column-366b&quot;,&quot;editable&quot;:false,&quot;hasCustomHeaderLabel&quot;:false,&quot;customHeaderLabel&quot;:&quot;&quot;,&quot;wrapText&quot;:true,&quot;order&quot;:0,&quot;label&quot;:&quot;Destination name&quot;,&quot;type&quot;:&quot;customRichText&quot;},{&quot;apiName&quot;:&quot;DesignationName__c&quot;,&quot;guid&quot;:&quot;column-f24a&quot;,&quot;editable&quot;:false,&quot;hasCustomHeaderLabel&quot;:false,&quot;customHeaderLabel&quot;:&quot;&quot;,&quot;wrapText&quot;:true,&quot;order&quot;:1,&quot;label&quot;:&quot;Designation name&quot;,&quot;type&quot;:&quot;text&quot;}]</stringValue>
                </value>
            </inputParameters>
            <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
            <storeOutputAutomatically>true</storeOutputAutomatically>
            <visibilityRule>
                <conditionLogic>and</conditionLogic>
                <conditions>
                    <leftValueReference>Taken_from</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <elementReference>A_product_not_yet_opened</elementReference>
                    </rightValue>
                </conditions>
            </visibilityRule>
        </fields>
        <fields>
            <name>productToTakeFrom</name>
            <dataTypeMappings>
                <typeName>T</typeName>
                <typeValue>FinServ__FinancialAccount__c</typeValue>
            </dataTypeMappings>
            <extensionName>flowruntime:datatable</extensionName>
            <fieldType>ComponentInstance</fieldType>
            <inputParameters>
                <name>label</name>
                <value>
                    <stringValue>Data Table</stringValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>selectionMode</name>
                <value>
                    <stringValue>SINGLE_SELECT</stringValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>minRowSelection</name>
                <value>
                    <numberValue>1.0</numberValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>tableData</name>
                <value>
                    <elementReference>Get_existing_products</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>maxRowSelection</name>
                <value>
                    <numberValue>1.0</numberValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>columns</name>
                <value>
                    <stringValue>[{&quot;apiName&quot;:&quot;Name&quot;,&quot;guid&quot;:&quot;column-e59e&quot;,&quot;editable&quot;:false,&quot;hasCustomHeaderLabel&quot;:false,&quot;customHeaderLabel&quot;:&quot;&quot;,&quot;wrapText&quot;:true,&quot;order&quot;:0,&quot;label&quot;:&quot;Financial Product&quot;,&quot;type&quot;:&quot;text&quot;}]</stringValue>
                </value>
            </inputParameters>
            <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
            <storeOutputAutomatically>true</storeOutputAutomatically>
            <visibilityRule>
                <conditionLogic>and</conditionLogic>
                <conditions>
                    <leftValueReference>Taken_from</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <elementReference>An_existing_product</elementReference>
                    </rightValue>
                </conditions>
            </visibilityRule>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>false</showHeader>
    </screens>
    <start>
        <locationX>50</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>Get_fee</targetReference>
        </connector>
    </start>
    <status>Active</status>
    <variables>
        <name>recordId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
    </variables>
</Flow>
