public with sharing class CustomerFactVulnerabilityHandler {
    public static Boolean evaluateVulnerability(List<Account> accountList){
        List<Account> accUpdate = new List<Account>();
        Final String VULNERABILITY_ENUM = 'VULNERABILITY';
        //map of account Id, string to populate with account Id and vulnerability status
        Map<Id, string> accountVulnMap = new Map<Id, string>();
        //get existing date vulnerability detected from clients and add to map to check if date passed in should be updated
        Map<Id, Account> vulnAccMap = new Map<Id, Account>([SELECT Id, Date_Vulnerability_Detected__c, Reason_for_Vulnerability__c FROM Account WHERE Id IN: accountList AND IsPersonAccount = true]);
        //loop through all facts in household. If the assessment is vulnerable, then add account Id to the map, with a 'vulnerable' status
		for(CustomerFact__c cusFact : [SELECT Id, Person__c, VulnerabilityAssessment__c, Household__c, FactCategoryEnum__c, Status__c FROM CustomerFact__c WHERE FactCategoryEnum__c = :VULNERABILITY_ENUM AND Household__c IN: accountList AND Status__c = 'Active']){
    		if(cusFact.vulnerabilityAssessment__c == 'Vulnerable'){
        		accountVulnMap.put(cusFact.Person__c, cusFact.VulnerabilityAssessment__c);
        		accountVulnMap.put(cusFact.Household__c, cusFact.VulnerabilityAssessment__c);
    		}
		}
        //loop through clients and household, if account doesn't exist in the map, we know there are no vulnerable facts add with Id, 'not vulnerable'.
		for(Account a : accountList){
    		if(!accountVulnMap.containsKey(a.Id)){
        		accountVulnMap.put(a.Id, 'Not vulnerable');
    		}
    		Boolean accountUpdated = false;
    		if(a.Vulnerable_Client__c != accountVulnMap.get(a.Id)) {
        		a.Vulnerable_Client__c = accountVulnMap.get(a.Id);
        		accountUpdated = true;
    		}
            if(a.isPersonAccount){
				Account oldAcc = vulnAccMap.get(a.Id);
                if(a.Date_Vulnerability_Detected__c != oldAcc.Date_Vulnerability_Detected__c){
            		accountUpdated = true;
    			}
                if(oldAcc.Reason_for_Vulnerability__c != a.Reason_for_Vulnerability__c){
                	accountUpdated = true;
            	}
            }
    		if(accountUpdated){
        		accUpdate.add(a);
    		}
		}
        if(!accUpdate.isEmpty()){
            Update accUpdate;
        }
        return true;
	}

    public static Boolean upsertFacts(List<CustomerFact__c> customerFacts){
        upsert customerFacts;
        return true;
    }
}