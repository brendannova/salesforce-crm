@isTest
public class CustomerFactVulnerabilityHandlerTest {
    
    @testSetup
    static void testSetup(){
        List<Account> testAccounts = TestDataFactory.createHousehold(2,0,'1235');
        Id hhRT = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('IndustriesHousehold').getRecordTypeId();
        Id personRT = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('PersonAccount').getRecordTypeId();
        Account household = [SELECT Id, Name, AccountNumber FROM Account WHERE Id IN: testAccounts AND RecordTypeId =: hhRT LIMIT 1];
        Account person = [SELECT Id, Name, AccountNumber FROM Account WHERE Id IN: testAccounts AND RecordTypeId =: personRT LIMIT 1];
        
        FactCategory__c vulnFC = new FactCategory__c();
        vulnFC.Name = 'Vulnerability';
        vulnFC.Enum__c = 'VULNERABILITY';
        insert vulnFC;
        
        Fact__c add = new Fact__c();
        add.Name = 'Addiction';
        add.Description__c = 'Add if this person is vulnerable as a result of someone close to them going through an illness we should be aware of';
        add.FactCategory__c = vulnFC.Id;
        insert add;
        
        Fact__c famIll = new Fact__c();
        famIll.Name = 'Family illness';
        famIll.Description__c = 'Vulnerability Add if this person is vulnerable as a result of someone close to them going through an illness we should be aware of';
        famIll.FactCategory__c = vulnFC.Id;
        insert famIll;
        
        CustomerFact__c vulnCF = new CustomerFact__c();
        vulnCF.Fact__c = add.Id;
        vulnCF.Name = add.Name;
        vulnCF.Household__c = household.Id;
        vulnCF.Person__c = person.Id;
        vulnCF.VulnerabilityAssessment__c = 'Vulnerable';
        vulnCF.Notes__c = 'This person is now vulnerable';
        insert vulnCF;
        
        CustomerFact__c famCF = new CustomerFact__c();
        famCF.Fact__c = famIll.Id;
        famCF.Household__c = household.Id;
        famCF.Person__c = person.Id;
        famCF.VulnerabilityAssessment__c = 'Not vulnerable';
        famCF.Notes__c = 'This person is not vulnerable';
        insert famCF;
        
    }
    
    
    @isTest
    static void vulnerability_householdVulnerable(){
        
        
        List<Account> testAccounts = new List<Account>();
        Id hhRT = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('IndustriesHousehold').getRecordTypeId();
        Id personRT = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('PersonAccount').getRecordTypeId();
        Account household1 = [SELECT Id, Name, Vulnerable_Client__c, IsPersonAccount, Date_Vulnerability_Detected__c FROM Account WHERE AccountNumber = '1235' LIMIT 1];
        Account person1 = [SELECT Id, Vulnerable_Client__c, IsPersonAccount, Date_Vulnerability_Detected__c, Reason_For_Vulnerability__c FROM Account WHERE IsPersonAccount = true LIMIT 1];
        testAccounts.add(household1);
        testAccounts.add(person1);     
         
        CustomerFactVulnerabilityEvaluation.FlowInputs accs = new CustomerFactVulnerabilityEvaluation.FlowInputs();
        accs.accountList = testAccounts;
        List<CustomerFactVulnerabilityEvaluation.FlowInputs> accsList = new List<CustomerFactVulnerabilityEvaluation.FlowInputs>();
        accsList.add(accs);
        
        test.StartTest();
        CustomerFactVulnerabilityEvaluation.evaluateInvocable(accsList);
        Account hh = [SELECT Id, Name, Vulnerable_Client__c, Reason_For_Vulnerability__c FROM Account WHERE AccountNumber = '1235' LIMIT 1];
        Account person = [SELECT Id, Name, Vulnerable_Client__c, Reason_For_Vulnerability__c FROM Account WHERE AccountNumber = '1235' AND IsPersonAccount = true LIMIT 1];
        test.StopTest();
        
        System.AssertEquals('Vulnerable', hh.Vulnerable_Client__c);  
        System.AssertEquals('Vulnerable', person.Vulnerable_Client__c);
    }
    
    @isTest
    static void vulnerability_notVulnerable(){
        
        CustomerFact__c cf = [SELECT Id FROM CustomerFact__c WHERE Name = 'Addiction'];
        cf.VulnerabilityAssessment__c = 'Not vulnerable';
        update cf;
        
        List<Account> testAccounts = new List<Account>();
        Id hhRT = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('IndustriesHousehold').getRecordTypeId();
        Id personRT = Schema.SObjectType.Account.getRecordTypeInfosByDeveloperName().get('PersonAccount').getRecordTypeId();
        Account household1 = [SELECT Id, Name, Vulnerable_Client__c, IsPersonAccount, Date_Vulnerability_Detected__c FROM Account WHERE AccountNumber = '1235' LIMIT 1];
        Account person1 = [SELECT Id, Vulnerable_Client__c, IsPersonAccount, Date_Vulnerability_Detected__c, Reason_For_Vulnerability__c FROM Account WHERE IsPersonAccount = true LIMIT 1];
        testAccounts.add(household1);
        testAccounts.add(person1);     
         
        CustomerFactVulnerabilityEvaluation.FlowInputs accs = new CustomerFactVulnerabilityEvaluation.FlowInputs();
        accs.accountList = testAccounts;
        List<CustomerFactVulnerabilityEvaluation.FlowInputs> accsList = new List<CustomerFactVulnerabilityEvaluation.FlowInputs>();
        accsList.add(accs);
        
        
        test.StartTest();
        CustomerFactVulnerabilityEvaluation.evaluateInvocable(accsList);
        Account hh = [SELECT Id, Name, Vulnerable_Client__c, Reason_For_Vulnerability__c FROM Account WHERE AccountNumber = '1235' LIMIT 1];
        Account person = [SELECT Id, Name, Vulnerable_Client__c, Reason_For_Vulnerability__c FROM Account WHERE AccountNumber = '1235' AND IsPersonAccount = true LIMIT 1];
        test.StopTest();
        
        System.AssertEquals('Not vulnerable', hh.Vulnerable_Client__c);  
        System.AssertEquals('Not vulnerable', person.Vulnerable_Client__c);
    }
    
    @isTest
    static void upsertFactsMethod() {
        

        List<CustomerFact__c> facts = new List<CustomerFact__c>();
        CustomerFact__c cf = [SELECT Id FROM CustomerFact__c WHERE Name = 'Addiction'];
        cf.Notes__c = 'Addicted to donuts';
        update cf;
        facts.add(cf);
        
        Fact__c addict = [SELECT Id FROM Fact__c WHERE Name = 'Addiction' LIMIT 1];
        Account hh = [SELECT Id, Name, Vulnerable_Client__c, Reason_For_Vulnerability__c FROM Account WHERE AccountNumber = '1235' LIMIT 1];
        Account person = [SELECT Id, Name, Vulnerable_Client__c, Reason_For_Vulnerability__c FROM Account WHERE AccountNumber = '1235' AND IsPersonAccount = true LIMIT 1];
        CustomerFact__c newCF = new CustomerFact__c();
        newCF.Fact__c = addict.Id;
        newCF.Household__c = hh.Id;
        newCF.Person__c = person.Id;
        newCF.VulnerabilityAssessment__c = 'Vulnerable';
        newCF.Notes__c = 'This person is now vulnerable';
        facts.add(newCF);
        
        
        CustomerFactVulnerabilityUpsert.FlowInputs cfFacts = new CustomerFactVulnerabilityUpsert.FlowInputs();
        cffacts.customerFacts = facts;
        List<CustomerFactVulnerabilityUpsert.FlowInputs> cfList = new List<CustomerFactVulnerabilityUpsert.FlowInputs>();
        cfList.add(cfFacts);
        
        test.StartTest();
        CustomerFactVulnerabilityUpsert.upsertInvocable(cfList);
        test.StopTest();
    }
}